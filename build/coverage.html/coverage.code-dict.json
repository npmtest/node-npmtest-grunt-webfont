{"/home/travis/build/npmtest/node-npmtest-grunt-webfont/test.js":"/* istanbul instrument in package npmtest_grunt_webfont */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-grunt-webfont/lib.npmtest_grunt_webfont.js":"/* istanbul instrument in package npmtest_grunt_webfont */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_grunt_webfont = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_grunt_webfont = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-grunt-webfont/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-grunt-webfont && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_grunt_webfont */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_grunt_webfont\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught.stack);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_grunt_webfont.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_grunt_webfont.rollup.js'] =\n            local.assetsDict['/assets.npmtest_grunt_webfont.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_grunt_webfont.__dirname +\n                    '/lib.npmtest_grunt_webfont.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-grunt-webfont/grunt-webfont/tasks/webfont.js":"/**\n * SVG to webfont converter for Grunt\n *\n * @requires ttfautohint\n * @author Artem Sapegin (http://sapegin.me)\n */\n\nmodule.exports = function(grunt) {\n\t'use strict';\n\n\tvar fs = require('fs');\n\tvar path = require('path');\n\tvar async = require('async');\n\tvar glob = require('glob');\n\tvar chalk = require('chalk');\n\tvar mkdirp = require('mkdirp');\n\tvar crypto = require('crypto');\n\tvar ttf2woff2 = require('ttf2woff2');\n\tvar _ = require('lodash');\n\tvar _s = require('underscore.string');\n\tvar wf = require('./util/util');\n\n\tgrunt.registerMultiTask('webfont', 'Compile separate SVG files to webfont', function() {\n\n\t\t/**\n\t\t * Winston to Grunt logger adapter.\n\t\t */\n\t\tvar logger = {\n\t\t\twarn: function() {\n\t\t\t\tgrunt.log.warn.apply(null, arguments);\n\t\t\t},\n\t\t\terror: function() {\n\t\t\t\tgrunt.warn.apply(null, arguments);\n\t\t\t},\n\t\t\tlog: function() {\n\t\t\t\tgrunt.log.writeln.apply(null, arguments);\n\t\t\t},\n\t\t\tverbose: function() {\n\t\t\t\tgrunt.verbose.writeln.apply(null, arguments);\n\t\t\t}\n\t\t};\n\n\t\tvar allDone = this.async();\n\t\tvar params = this.data;\n\t\tvar options = this.options();\n\t\tvar md5 = crypto.createHash('md5');\n\n\t\t/*\n\t\t * Check for `src` param on target config\n\t\t */\n\t\tthis.requiresConfig([this.name, this.target, 'src'].join('.'));\n\n\t\t/*\n\t\t * Check for `dest` param on either target config or global options object\n\t\t */\n\t\tif (_.isUndefined(params.dest) && _.isUndefined(options.dest)) {\n\t\t\tlogger.warn('Required property ' + [this.name, this.target, 'dest'].join('.')\n\t\t\t\t+ ' or ' + [this.name, this.target, 'options.dest'].join('.') + ' missing.');\n\t\t}\n\n\t\tif (options.skip) {\n\t\t\tcompleteTask();\n\t\t\treturn;\n\t\t}\n\n\t\t// Source files\n\t\tvar files = _.filter(this.filesSrc, isSvgFile);\n\t\tif (!files.length) {\n\t\t\tlogger.warn('Specified empty list of source SVG files.');\n\t\t\tcompleteTask();\n\t\t\treturn;\n\t\t}\n\n\t\t// path must be a string, see https://nodejs.org/api/path.html#path_path_extname_path\n\t\tif (typeof options.template !== 'string') {\n\t\t\toptions.template = '';\n\t\t}\n\n\t\t// Options\n\t\tvar o = {\n\t\t\tlogger: logger,\n\t\t\tfontBaseName: options.font || 'icons',\n\t\t\tdestCss: options.destCss || params.destCss || params.dest,\n\t\t\tdestScss: options.destScss || params.destScss || params.destCss || params.dest,\n\t\t\tdestSass: options.destSass || params.destSass || params.destCss || params.dest,\n\t\t\tdestLess: options.destLess || params.destLess || params.destCss || params.dest,\n\t\t\tdestStyl: options.destStyl || params.destStyl || params.destCss || params.dest,\n\t\t\tdest: options.dest || params.dest,\n\t\t\trelativeFontPath: options.relativeFontPath,\n\t\t\taddHashes: options.hashes !== false,\n\t\t\taddLigatures: options.ligatures === true,\n\t\t\ttemplate: options.template,\n\t\t\tsyntax: options.syntax || 'bem',\n\t\t\ttemplateOptions: options.templateOptions || {},\n\t\t\tstylesheets: options.stylesheets || [options.stylesheet || path.extname(options.template).replace(/^\\./, '') || 'css'],\n\t\t\thtmlDemo: options.htmlDemo !== false,\n\t\t\thtmlDemoTemplate: options.htmlDemoTemplate,\n\t\t\thtmlDemoFilename: options.htmlDemoFilename,\n\t\t\tstyles: optionToArray(options.styles, 'font,icon'),\n\t\t\ttypes: optionToArray(options.types, 'eot,woff,ttf'),\n\t\t\torder: optionToArray(options.order, wf.fontFormats),\n\t\t\tembed: options.embed === true ? ['woff'] : optionToArray(options.embed, false),\n\t\t\trename: options.rename || path.basename,\n\t\t\tengine: options.engine || 'fontforge',\n\t\t\tautoHint: options.autoHint !== false,\n\t\t\tcodepoints: options.codepoints,\n\t\t\tcodepointsFile: options.codepointsFile,\n\t\t\tstartCodepoint: options.startCodepoint || wf.UNICODE_PUA_START,\n\t\t\tie7: options.ie7 === true,\n\t\t\tnormalize: options.normalize === true,\n\t\t\toptimize: options.optimize === false ? false : true,\n\t\t\tround: options.round !== undefined ? options.round : 10e12,\n\t\t\tfontHeight: options.fontHeight !== undefined ? options.fontHeight : 512,\n\t\t\tdescent: options.descent !== undefined ? options.descent : 64,\n\t\t\tversion: options.version !== undefined ? options.version : false,\n\t\t\tcache: options.cache || path.join(__dirname, '..', '.cache'),\n\t\t\tcallback: options.callback,\n\t\t\tcustomOutputs: options.customOutputs,\n\t\t\texecMaxBuffer: options.execMaxBuffer || 1024 * 200\n\t\t};\n\n\t\to = _.extend(o, {\n\t\t\tfontName: o.fontBaseName,\n\t\t\tdestCssPaths: {\n\t\t\t\tcss: o.destCss,\n\t\t\t\tscss: o.destScss,\n\t\t\t\tsass: o.destSass,\n\t\t\t\tless: o.destLess,\n\t\t\t\tstyl: o.destStyl\n\t\t\t},\n\t\t\trelativeFontPath: o.relativeFontPath || path.relative(o.destCss, o.dest),\n\t\t\tdestHtml: options.destHtml || o.destCss,\n\t\t\tfontfaceStyles: has(o.styles, 'font'),\n\t\t\tbaseStyles: has(o.styles, 'icon'),\n\t\t\textraStyles: has(o.styles, 'extra'),\n\t\t\tfiles: files,\n\t\t\tglyphs: []\n\t\t});\n\n\t\to.hash = getHash();\n\t\to.fontFilename = template(options.fontFilename || o.fontBaseName, o);\n\t\to.fontFamilyName = template(options.fontFamilyName || o.fontBaseName, o);\n\n\t\t// “Rename” files\n\t\to.glyphs = o.files.map(function(file) {\n\t\t\treturn o.rename(file).replace(path.extname(file), '');\n\t\t});\n\n\t\t// Check or generate codepoints\n\t\t// @todo Codepoint can be a Unicode code or character.\n\t\tvar currentCodepoint = o.startCodepoint;\n\t\tif (!o.codepoints) o.codepoints = {};\n\t\tif (o.codepointsFile) o.codepoints = readCodepointsFromFile();\n\t\to.glyphs.forEach(function(name) {\n\t\t\tif (!o.codepoints[name]) {\n\t\t\t\to.codepoints[name] = getNextCodepoint();\n\t\t\t}\n\t\t});\n\t\tif (o.codepointsFile) saveCodepointsToFile();\n\n\t\t// Check if we need to generate font\n\t\tvar previousHash = readHash(this.name, this.target);\n\t\tlogger.verbose('New hash:', o.hash, '- previous hash:', previousHash);\n\t\tif (o.hash === previousHash) {\n\t\t\tlogger.verbose('Config and source files weren’t changed since last run, checking resulting files...');\n\t\t\tvar regenerationNeeded = false;\n\n\t\t\tvar generatedFiles = wf.generatedFontFiles(o);\n\t\t\tif (!generatedFiles.length){\n\t\t\t\tregenerationNeeded = true;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tgeneratedFiles.push(getDemoFilePath());\n\t\t\t\to.stylesheets.forEach(function(stylesheet) {\n\t\t\t\t\tgeneratedFiles.push(getCssFilePath(stylesheet));\n\t\t\t\t});\n\n\t\t\t\tregenerationNeeded = _.some(generatedFiles, function(filename) {\n\t\t\t\t\tif (!filename) return false;\n\t\t\t\t\tif (!fs.existsSync(filename)) {\n\t\t\t\t\t\tlogger.verbose('File', filename, ' is missed.');\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t\treturn false;\n\t\t\t\t});\n\t\t\t}\n\t\t\tif (!regenerationNeeded) {\n\t\t\t\tlogger.log('Font ' + chalk.cyan(o.fontName) + ' wasn’t changed since last run.');\n\t\t\t\tcompleteTask();\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\t// Save new hash and run\n\t\tsaveHash(this.name, this.target, o.hash);\n\t\tasync.waterfall([\n\t\t\tcreateOutputDirs,\n\t\t\tcleanOutputDir,\n\t\t\tgenerateFont,\n\t\t\tgenerateWoff2Font,\n\t\t\tgenerateStylesheets,\n\t\t\tgenerateDemoHtml,\n\t\t\tgenerateCustomOutputs,\n\t\t\tprintDone\n\t\t], completeTask);\n\n\t\t/**\n\t\t * Call callback function if it was specified in the options.\n\t\t */\n\t\tfunction completeTask() {\n\t\t\tif (o && _.isFunction(o.callback)) {\n\t\t\t\to.callback(o.fontName, o.types, o.glyphs, o.hash);\n\t\t\t}\n\t\t\tallDone();\n\t\t}\n\n\t\t/**\n\t\t * Calculate hash to flush browser cache.\n\t\t * Hash is based on source SVG files contents, task options and grunt-webfont version.\n\t\t *\n\t\t * @return {String}\n\t\t */\n\t\tfunction getHash() {\n\t\t\t// Source SVG files contents\n\t\t\to.files.forEach(function(file) {\n\t\t\t\tmd5.update(fs.readFileSync(file, 'utf8'));\n\t\t\t});\n\n\t\t\t// Options\n\t\t\tmd5.update(JSON.stringify(o));\n\n\t\t\t// grunt-webfont version\n\t\t\tvar packageJson = require('../package.json');\n\t\t\tmd5.update(packageJson.version);\n\n\t\t\t// Templates\n\t\t\tif (o.template) {\n\t\t\t\tmd5.update(fs.readFileSync(o.template, 'utf8'));\n\t\t\t}\n\t\t\tif (o.htmlDemoTemplate) {\n\t\t\t\tmd5.update(fs.readFileSync(o.htmlDemoTemplate, 'utf8'));\n\t\t\t}\n\n\t\t\treturn md5.digest('hex');\n\t\t}\n\n\t\t/**\n\t\t * Create output directory\n\t\t *\n\t\t * @param {Function} done\n\t\t */\n\t\tfunction createOutputDirs(done) {\n\t\t\to.stylesheets.forEach(function(stylesheet) {\n\t\t\t\tmkdirp.sync(option(o.destCssPaths, stylesheet));\n\t\t\t});\n\t\t\tmkdirp.sync(o.dest);\n\t\t\tdone();\n\t\t}\n\n\t\t/**\n\t\t * Clean output directory\n\t\t *\n\t\t * @param {Function} done\n\t\t */\n\t\tfunction cleanOutputDir(done) {\n\t\t\tvar htmlDemoFileMask = path.join(o.destCss, o.fontBaseName + '*.{css,html}');\n\t\t\tvar files = glob.sync(htmlDemoFileMask).concat(wf.generatedFontFiles(o));\n\t\t\tasync.forEach(files, function(file, next) {\n\t\t\t\tfs.unlink(file, next);\n\t\t\t}, done);\n\t\t}\n\n\t\t/**\n\t\t * Generate font using selected engine\n\t\t *\n\t\t * @param {Function} done\n\t\t */\n\t\tfunction generateFont(done) {\n\t\t\tvar engine = require('./engines/' + o.engine);\n\t\t\tengine(o, function(result) {\n\t\t\t\tif (result === false) {\n\t\t\t\t\t// Font was not created, exit\n\t\t\t\t\tcompleteTask();\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (result) {\n\t\t\t\t\to = _.extend(o, result);\n\t\t\t\t}\n\n\t\t\t\tdone();\n\t\t\t});\n\t\t}\n\n\t\t/**\n\t\t * Converts TTF font to WOFF2.\n\t\t *\n\t\t * @param {Function} done\n\t\t */\n\t\tfunction generateWoff2Font(done) {\n\t\t\tif (!has(o.types, 'woff2')) {\n\t\t\t\tdone();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Read TTF font\n\t\t\tvar ttfFontPath = wf.getFontPath(o, 'ttf');\n\t\t\tvar ttfFont = fs.readFileSync(ttfFontPath);\n\n\t\t\t// Remove TTF font if not needed\n\t\t\tif (!has(o.types, 'ttf')) {\n\t\t\t\tfs.unlinkSync(ttfFontPath);\n\t\t\t}\n\n\t\t\t// Convert to WOFF2\n\t\t\tvar woffFont = ttf2woff2(ttfFont);\n\n\t\t\t// Save\n\t\t\tvar woff2FontPath = wf.getFontPath(o, 'woff2');\n\t\t\tfs.writeFile(woff2FontPath, woffFont, done);\n\t\t}\n\n\t\t/**\n\t\t * Generate CSS\n\t\t *\n\t\t * @param {Function} done\n\t\t */\n\t\tfunction generateStylesheets(done) {\n\t\t\t// Convert codepoints to array of strings\n\t\t\tvar codepoints = [];\n\t\t\t_.each(o.glyphs, function(name) {\n\t\t\t\tcodepoints.push(o.codepoints[name].toString(16));\n\t\t\t});\n\t\t\to.codepoints = codepoints;\n\n\t\t\t// Prepage glyph names to use as CSS classes\n\t\t\to.glyphs = _.map(o.glyphs, classnameize);\n\n\t\t\to.stylesheets.forEach(generateStylesheet);\n\n\t\t\tdone();\n\t\t}\n\n\t\t/**\n\t\t * Generate CSS\n\t\t *\n\t\t * @param {String} stylesheet type: css, scss, ...\n\t\t */\n\t\tfunction generateStylesheet(stylesheet) {\n\t\t\to.relativeFontPath = normalizePath(o.relativeFontPath);\n\n\t\t\t// Generate font URLs to use in @font-face\n\t\t\tvar fontSrcs = [[], []];\n\t\t\to.order.forEach(function(type) {\n\t\t\t\tif (!has(o.types, type)) return;\n\t\t\t\twf.fontsSrcsMap[type].forEach(function(font, idx) {\n\t\t\t\t\tif (font) {\n\t\t\t\t\t\tfontSrcs[idx].push(generateFontSrc(type, font));\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\n\t\t\t// Convert urls to strings that could be used in CSS\n\t\t\tvar fontSrcSeparator = option(wf.fontSrcSeparators, stylesheet);\n\t\t\tfontSrcs.forEach(function(font, idx) {\n\t\t\t\t// o.fontSrc1, o.fontSrc2\n\t\t\t\to['fontSrc'+(idx+1)] = font.join(fontSrcSeparator);\n\t\t\t});\n\t\t\to.fontRawSrcs = fontSrcs;\n\n\t\t\t// Read JSON file corresponding to CSS template\n\t\t\tvar templateJson = readTemplate(o.template, o.syntax, '.json', true);\n\t\t\tif (templateJson) o = _.extend(o, JSON.parse(templateJson.template));\n\n\t\t\t// Now override values with templateOptions\n\t\t\tif (o.templateOptions) o = _.extend(o, o.templateOptions);\n\n\t\t\t// Generate CSS\n\t\t\tvar ext = path.extname(o.template) || '.css';  // Use extension of o.template file if given, or default to .css\n\t\t\to.cssTemplate = readTemplate(o.template, o.syntax, ext);\n\t\t\tvar cssContext = _.extend(o, {\n\t\t\t\ticonsStyles: true,\n\t\t\t\tstylesheet: stylesheet\n\t\t\t});\n\n\t\t\tvar css = renderTemplate(o.cssTemplate, cssContext);\n\n\t\t\t// Fix CSS preprocessors comments: single line comments will be removed after compilation\n\t\t\tif (has(['sass', 'scss', 'less', 'styl'], stylesheet)) {\n\t\t\t\tcss = css.replace(/\\/\\* *(.*?) *\\*\\//g, '// $1');\n\t\t\t}\n\n\t\t\t// Save file\n\t\t\tfs.writeFileSync(getCssFilePath(stylesheet), css);\n\t\t}\n\n\t\t/**\n\t\t * Gets the codepoints from the set filepath in o.codepointsFile\n\t\t */\n\t\tfunction readCodepointsFromFile(){\n\t\t\tif (!o.codepointsFile) return {};\n\t\t\tif (!fs.existsSync(o.codepointsFile)){\n\t\t\t\tlogger.verbose('Codepoints file not found');\n\t\t\t\treturn {};\n\t\t\t}\n\n\t\t\tvar buffer = fs.readFileSync(o.codepointsFile);\n\t\t\treturn JSON.parse(buffer.toString());\n\t\t}\n\n\t\t/**\n\t\t * Saves the codespoints to the set file\n\t\t */\n\t\tfunction saveCodepointsToFile(){\n\t\t\tif (!o.codepointsFile) return;\n\t\t\tvar codepointsToString = JSON.stringify(o.codepoints, null, 4);\n\t\t\ttry {\n\t\t\t\tfs.writeFileSync(o.codepointsFile, codepointsToString);\n\t\t\t\tlogger.verbose('Codepoints saved to file \"' + o.codepointsFile + '\".');\n\t\t\t} catch (err) {\n\t\t\t\tlogger.error(err.message);\n\t\t\t}\n\t\t}\n\n\t\t/*\n\t\t * Prepares base context for templates\n\t\t */\n\t\tfunction prepareBaseTemplateContext() {\n\t\t\tvar context = _.extend({}, o);\n\t\t\treturn context;\n\t\t}\n\n\t\t/*\n\t\t * Makes custom extends necessary for use with preparing the template context\n\t\t * object for the HTML demo.\n\t\t */\n\t\tfunction prepareHtmlTemplateContext() {\n\n\t\t\tvar context = prepareBaseTemplateContext();\n\n\t\t\tvar htmlStyles;\n\n\t\t\t// Prepare relative font paths for injection into @font-face refs in HTML\n\t\t\tvar relativeRe = new RegExp(_s.escapeRegExp(o.relativeFontPath), 'g');\n\t\t\tvar htmlRelativeFontPath = normalizePath(path.relative(o.destHtml, o.dest));\n\t\t\tvar _fontSrc1 = o.fontSrc1.replace(relativeRe, htmlRelativeFontPath);\n\t\t\tvar _fontSrc2 = o.fontSrc2.replace(relativeRe, htmlRelativeFontPath);\n\n\t\t\t_.extend(context, {\n\t\t\t\tfontSrc1: _fontSrc1,\n\t\t\t\tfontSrc2: _fontSrc2,\n\t\t\t\tfontfaceStyles: true,\n\t\t\t\tbaseStyles: true,\n\t\t\t\textraStyles: false,\n\t\t\t\ticonsStyles: true,\n\t\t\t\tstylesheet: 'css'\n\t\t\t});\n\n\t\t\t// Prepares CSS for injection into <style> tag at to of HTML\n\t\t\thtmlStyles = renderTemplate(o.cssTemplate, context);\n\t\t\t_.extend(context, {\n\t\t\t\tstyles: htmlStyles\n\t\t\t});\n\n\t\t\treturn context;\n\t\t}\n\n\t\t/*\n\t\t * Iterator function used as callback by looping construct below to\n\t\t * render \"custom output\" via mini configuration objects specified in\n\t\t * the array `options.customOutputs`.\n\t\t */\n\t\tfunction generateCustomOutput(outputConfig) {\n\n\t\t\t// Accesses context\n\t\t\tvar context = prepareBaseTemplateContext();\n\t\t\t_.extend(context, outputConfig.context);\n\n\t\t\t// Prepares config attributes related to template filepath\n\t\t\tvar templatePath = outputConfig.template;\n\t\t\tvar extension = path.extname(templatePath);\n\t\t\tvar syntax = outputConfig.syntax || '';\n\n\t\t\t// Renders template with given context\n\t\t\tvar template = readTemplate(templatePath, syntax, extension);\n\t\t\tvar output = renderTemplate(template, context);\n\n\t\t\t// Prepares config attributes related to destination filepath\n\t\t\tvar dest = outputConfig.dest || o.dest;\n\n\t\t\tvar filepath;\n\t\t\tvar destParent;\n\t\t\tvar destName;\n\n\t\t\tif (path.extname(dest) === '') {\n\t\t\t\t// If user specifies a directory, filename should be same as template\n\t\t\t\tdestParent = dest;\n\t\t\t\tdestName = path.basename(outputConfig.template);\n\t\t\t\tfilepath = path.join(dest, destName);\n\t\t\t}\n\t\t\telse {\n\t\t\t\t// If user specifies a file, that is our filepath\n\t\t\t\tdestParent = path.dirname(dest);\n\t\t\t\tfilepath = dest;\n\t\t\t}\n\n\t\t\t// Ensure existence of parent directory and output to file as desired\n\t\t\tmkdirp.sync(destParent);\n\t\t\tfs.writeFileSync(filepath, output);\n\t\t}\n\n\t\t/*\n\t\t * Iterates over entries in the `options.customOutputs` object and,\n\t\t * on a config-by-config basis, generates the desired results.\n\t\t */\n\t\tfunction generateCustomOutputs(done) {\n\n\t\t\tif (!o.customOutputs || o.customOutputs.length < 1) {\n\t\t\t\tdone();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t_.each(o.customOutputs, generateCustomOutput);\n\t\t\tdone();\n\t\t}\n\n\t\t/**\n\t\t * Generate HTML demo page\n\t\t *\n\t\t * @param {Function} done\n\t\t */\n\t\tfunction generateDemoHtml(done) {\n\t\t\tif (!o.htmlDemo) {\n\t\t\t\tdone();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar context = prepareHtmlTemplateContext();\n\n\t\t\t// Generate HTML\n\t\t\tvar demoTemplate = readTemplate(o.htmlDemoTemplate, 'demo', '.html');\n\t\t\tvar demo = renderTemplate(demoTemplate, context);\n\n\t\t\tmkdirp(getDemoPath(), function(err) {\n\t\t\t\tif (err) {\n\t\t\t\t\tlogger.log(err);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\t// Save file\n\t\t\t\tfs.writeFileSync(getDemoFilePath(), demo);\n\t\t\t\tdone();\n\t\t\t});\n\n\t\t}\n\n\t\t/**\n\t\t * Print log\n\t\t *\n\t\t * @param {Function} done\n\t\t */\n\t\tfunction printDone(done) {\n\t\t\tlogger.log('Font ' + chalk.cyan(o.fontName) + ' with ' + o.glyphs.length + ' glyphs created.');\n\t\t\tdone();\n\t\t}\n\n\n\t\t/**\n\t\t * Helpers\n\t\t */\n\n\t\t/**\n\t\t * Convert a string of comma separated words into an array\n\t\t *\n\t\t * @param {String} val Input string\n\t\t * @param {String} defVal Default value\n\t\t * @return {Array}\n\t\t */\n\t\tfunction optionToArray(val, defVal) {\n\t\t\tif (val === undefined) {\n\t\t\t\tval = defVal;\n\t\t\t}\n\t\t\tif (!val) {\n\t\t\t\treturn [];\n\t\t\t}\n\t\t\tif (typeof val !== 'string') {\n\t\t\t\treturn val;\n\t\t\t}\n\t\t\treturn val.split(',').map(_.trim);\n\t\t}\n\n\t\t/**\n\t\t * Check if a value exists in an array\n\t\t *\n\t\t * @param {Array} haystack Array to find the needle in\n\t\t * @param {Mixed} needle Value to find\n\t\t * @return {Boolean} Needle was found\n\t\t */\n\t\tfunction has(haystack, needle) {\n\t\t\treturn haystack.indexOf(needle) !== -1;\n\t\t}\n\n\t\t/**\n\t\t * Return a specified option if it exists in an object or `_default` otherwise\n\t\t *\n\t\t * @param {Object} map Options object\n\t\t * @param {String} key Option to find in the object\n\t\t * @return {Mixed}\n\t\t */\n\t\tfunction option(map, key) {\n\t\t\tif (key in map) {\n\t\t\t\treturn map[key];\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn map._default;\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * Find next unused codepoint.\n\t\t *\n\t\t * @return {Integer}\n\t\t */\n\t\tfunction getNextCodepoint() {\n\t\t\twhile (_.includes(o.codepoints, currentCodepoint)) {\n\t\t\t\tcurrentCodepoint++;\n\t\t\t}\n\t\t\treturn currentCodepoint;\n\t\t}\n\n\t\t/**\n\t\t * Check whether file is SVG or not\n\t\t *\n\t\t * @param {String} filepath File path\n\t\t * @return {Boolean}\n\t\t */\n\t\tfunction isSvgFile(filepath) {\n\t\t\treturn path.extname(filepath).toLowerCase() === '.svg';\n\t\t}\n\n\t\t/**\n\t\t * Convert font file to data:uri and remove source file\n\t\t *\n\t\t * @param {String} fontFile Font file path\n\t\t * @return {String} Base64 encoded string\n\t\t */\n\t\tfunction embedFont(fontFile) {\n\t\t\t// Convert to data:uri\n\t\t\tvar dataUri = fs.readFileSync(fontFile, 'base64');\n\t\t\tvar type = path.extname(fontFile).substring(1);\n\t\t\tvar fontUrl = 'data:application/x-font-' + type + ';charset=utf-8;base64,' + dataUri;\n\n\t\t\t// Remove font file\n\t\t\tfs.unlinkSync(fontFile);\n\n\t\t\treturn fontUrl;\n\t\t}\n\n\t\t/**\n\t\t * Append a slash to end of a filepath if it not exists and make all slashes forward\n\t\t *\n\t\t * @param {String} filepath File path\n\t\t * @return {String}\n\t\t */\n\t\tfunction normalizePath(filepath) {\n\t\t\tif (!filepath.length) return filepath;\n\n\t\t\t// Make all slashes forward\n\t\t\tfilepath = filepath.replace(/\\\\/g, '/');\n\n\t\t\t// Make sure path ends with a slash\n\t\t\tif (!_s.endsWith(filepath, '/')) {\n\t\t\t\tfilepath += '/';\n\t\t\t}\n\n\t\t\treturn filepath;\n\t\t}\n\n\t\t/**\n\t\t * Generate URL for @font-face\n\t\t *\n\t\t * @param {String} type Type of font\n\t\t * @param {Object} font URL or Base64 string\n\t\t * @return {String}\n\t\t */\n\t\tfunction generateFontSrc(type, font) {\n\t\t\tvar filename = template(o.fontFilename + font.ext, o);\n\n\t\t\tvar url;\n\t\t\tif (font.embeddable && has(o.embed, type)) {\n\t\t\t\turl = embedFont(path.join(o.dest, filename));\n\t\t\t}\n\t\t\telse {\n\t\t\t\turl = o.relativeFontPath + filename;\n\t\t\t\tif (o.addHashes) {\n\t\t\t\t\tif (url.indexOf('#iefix') === -1) {  // Do not add hashes for OldIE\n\t\t\t\t\t\t// Put hash at the end of an URL or before #hash\n\t\t\t\t\t\turl = url.replace(/(#|$)/, '?' + o.hash + '$1');\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvar src = 'url(\"' + url + '\")';\n\t\t\tif (font.format) src += ' format(\"' + font.format + '\")';\n\n\t\t\treturn src;\n\t\t}\n\n\t\t/**\n\t\t * Reat the template file\n\t\t *\n\t\t * @param {String} template Template file path\n\t\t * @param {String} syntax Syntax (bem, bootstrap, etc.)\n\t\t * @param {String} ext Extention of the template\n\t\t * @return {Object} {filename: 'Template filename', template: 'Template code'}\n\t\t */\n\t\tfunction readTemplate(template, syntax, ext, optional) {\n\t\t\tvar filename = template\n\t\t\t\t? path.resolve(template.replace(path.extname(template), ext))\n\t\t\t\t: path.join(__dirname, 'templates/' + syntax + ext)\n\t\t\t;\n\t\t\tif (fs.existsSync(filename)) {\n\t\t\t\treturn {\n\t\t\t\t\tfilename: filename,\n\t\t\t\t\ttemplate: fs.readFileSync(filename, 'utf8')\n\t\t\t\t};\n\t\t\t}\n\t\t\telse if (!optional) {\n\t\t\t\treturn grunt.fail.fatal('Cannot find template at path: ' + filename);\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * Render template with error reporting\n\t\t *\n\t\t * @param {Object} template {filename: 'Template filename', template: 'Template code'}\n\t\t * @param {Object} context Template context\n\t\t * @return {String}\n\t\t */\n\t\tfunction renderTemplate(template, context) {\n\t\t\ttry {\n\t\t\t\tvar func = _.template(template.template);\n\t\t\t\treturn func(context);\n\t\t\t}\n\t\t\tcatch (e) {\n\t\t\t\tgrunt.fail.fatal('Error while rendering template ' + template.filename + ': ' + e.message);\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * Basic template function: replaces {variables}\n\t\t *\n\t\t * @param {Template} tmpl Template code\n\t\t * @param {Object} context Values object\n\t\t * @return {String}\n\t\t */\n\t\tfunction template(tmpl, context) {\n\t\t\treturn tmpl.replace(/\\{([^\\}]+)\\}/g, function(m, key) {\n\t\t\t\treturn context[key];\n\t\t\t});\n\t\t}\n\n\t\t/**\n\t\t * Prepare string to use as CSS class name\n\t\t *\n\t\t * @param {String} str\n\t\t * @return {String}\n\t\t */\n\t\tfunction classnameize(str) {\n\t\t\treturn _s.trim(str).replace(/\\s+/g, '-');\n\t\t}\n\n\t\t/**\n\t\t * Return path of CSS file.\n\t\t *\n\t\t * @param {String} stylesheet (css, scss, ...)\n\t\t * @return {String}\n\t\t */\n\t\tfunction getCssFilePath(stylesheet) {\n\t\t\tvar cssFilePrefix = option(wf.cssFilePrefixes, stylesheet);\n\t\t\treturn path.join(option(o.destCssPaths, stylesheet), cssFilePrefix + o.fontBaseName + '.' + stylesheet);\n\t\t}\n\n\t\t/**\n\t\t * Return path of HTML demo file or `null` if its generation was disabled.\n\t\t *\n\t\t * @return {String}\n\t\t */\n\t\tfunction getDemoFilePath() {\n\t\t\tif (!o.htmlDemo) return null;\n\t\t\tvar name = o.htmlDemoFilename || o.fontBaseName;\n\t\t\treturn path.join(o.destHtml, name + '.html');\n\t\t}\n\n\t\t/**\n\t\t * Return path of HTML demo file or `null` if feature was disabled\n\t\t */\n\t\tfunction getDemoPath() {\n\t\t\tif (!o.htmlDemo) return null;\n\t\t\treturn o.destHtml;\n\t\t}\n\n\t\t/**\n\t\t * Save hash to cache file.\n\t\t *\n\t\t * @param {String} name Task name (webfont).\n\t\t * @param {String} target Task target name.\n\t\t * @param {String} hash Hash.\n\t\t */\n\t\tfunction saveHash(name, target, hash) {\n\t\t\tvar filepath = getHashPath(name, target);\n\t\t\tmkdirp.sync(path.dirname(filepath));\n\t\t\tfs.writeFileSync(filepath, hash);\n\t\t}\n\n\t\t/**\n\t\t * Read hash from cache file or `null` if file don’t exist.\n\t\t *\n\t\t * @param {String} name Task name (webfont).\n\t\t * @param {String} target Task target name.\n\t\t * @return {String}\n\t\t */\n\t\tfunction readHash(name, target) {\n\t\t\tvar filepath = getHashPath(name, target);\n\t\t\tif (fs.existsSync(filepath)) {\n\t\t\t\treturn fs.readFileSync(filepath, 'utf8');\n\t\t\t}\n\t\t\treturn null;\n\t\t}\n\n\t\t/**\n\t\t * Return path to cache file.\n\t\t *\n\t\t * @param {String} name Task name (webfont).\n\t\t * @param {String} target Task target name.\n\t\t * @return {String}\n\t\t */\n\t\tfunction getHashPath(name, target) {\n\t\t\treturn path.join(o.cache, name, target, 'hash');\n\t\t}\n\t});\n};\n"}